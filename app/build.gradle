apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.1' //Use latest version
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.coveragereport"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true

            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
    afterEvaluate {
        // Grab all build types and product flavors
        def buildTypes = android.buildTypes.collect { type -> type.name }
        def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

        // When no product flavors defined, use empty
        if (!productFlavors) productFlavors.add('')

        productFlavors.each { productFlavorName ->
            buildTypes.each { buildTypeName ->
                def sourceName, sourcePath
                if (!productFlavorName) {
                    sourceName = sourcePath = "${buildTypeName}"
                } else {
                    sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                    sourcePath = "${productFlavorName}/${buildTypeName}"
                }
                def testTaskName = "test${sourceName.capitalize()}UnitTest"

                // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                    def excludes = [
                            '**/R.class',
                            '**/R$*.class',
                            '**/Manifest*.*',
                            'android/**/*.*',
                            '**/BuildConfig.*',
                            '**/*$ViewBinder*.*',
                            '**/*$ViewInjector*.*',
                            '**/Lambda$*.class',
                            '**/Lambda.class',
                            '**/*Lambda.class',
                            '**/*Lambda*.class'
                    ]

                    classDirectories = fileTree(
                            dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                            excludes: excludes
                    ) + fileTree(
                            dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
                            excludes: excludes
                    )

                    def coverageSourceDirs = [
                            "src/main/java",
                            "src/$productFlavorName/java",
                            "src/$buildTypeName/java"
                    ]
                    additionalSourceDirs = files(coverageSourceDirs)
                    sourceDirectories = files(coverageSourceDirs)
                    executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                    reports {
                        xml.enabled = true
                        html.enabled = true
                    }
                }
            }
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
